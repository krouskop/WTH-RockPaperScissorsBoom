# This is a basic workflow to help you get started with Actions

name: V2CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Setup output job variables, and job environment. 
    outputs:
      image: ${{ steps.image-name.outputs.image }}

    env:
      registry: ${{ secrets.ACR_SERVER }}
      acrUname: ${{ secrets.ACR_UNAME }}
      acrPassword: ${{ secrets.ACR_PASSWORD }}
      ghOrgName: '<GITHUB-ORG-NAME>'
      imageName: 'rockpaperscisors-server'
      imageDockerFile: 'Dockerfile-Server'


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Action to create a unique tag for the image
      - name: Image Tag
        id: image-tag
        run: |
          echo "::set-output name=tag::$(date +%s)"
      # Sets up docker build system
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v1.1.1

      # Configures docker to use your private registry  
      - name: Docker Login
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ env.acrUname }}
          password: ${{ env.acrPassword }}
          registry: ${{ env.registry }}

      # Builds and pushes the image
      - name: Build and push image
        uses: docker/build-push-action@v2.2.1
        with:
          context: ./Student/Resources/Code
          file: ./Student/Resources/Code/${{ env.imageDockerFile }}
          push: true
          tags: ${{ env.registry }}/${{ env.imageName }}:${{ steps.image-tag.outputs.tag }}

      # We capture the image name and tag in an output variable so we know which one to use for deployment
      - name: Set Image to Deploy
        id: image-name
        run: |
          echo "::set-output name=image::${{ env.imageName }}:${{ steps.image-tag.outputs.tag }}"
